{
  "version": 3,
  "sources": ["../src/module.js", "../src/api.js", "../src/actor.js", "../src/apps/names.js", "../src/third/dnd5e.js", "../src/third/pf2e.js", "../src/third/wire.js", "../src/third.js", "../src/chat.js", "../src/token.js", "../src/tracker.js", "../src/main.js"],
  "sourcesContent": ["export const MODULE_ID = 'anonymous'\n\nexport function templatePath(...path) {\n    path = path.filter(x => typeof x === 'string')\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\n}\n\nexport function isGM() {\n    const data = game.data\n    const user = data.users.find(x => x._id === data.userId)\n    return !!user && user.role >= CONST.USER_ROLES.GAMEMASTER\n}\n\nexport function getFlag(doc, key, fallback) {\n    return doc.getFlag(MODULE_ID, key) ?? fallback\n}\n\nexport function setFlag(doc, key, value) {\n    return doc.setFlag(MODULE_ID, key, value)\n}\n\nexport function localize(...args) {\n    let [key, data] = args\n    key = `${MODULE_ID}.${key}`\n    if (data) return game.i18n.format(key, data)\n    return game.i18n.localize(key)\n}\n\nexport function subLocalize(subKey) {\n    const fn = (...args) => localize(`${subKey}.${args[0]}`, args[1])\n\n    Object.defineProperties(fn, {\n        warn: {\n            value: (...args) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\n            enumerable: false,\n            configurable: false,\n        },\n        info: {\n            value: (...args) => info(`${subKey}.${args[0]}`, args[1], args[2]),\n            enumerable: false,\n            configurable: false,\n        },\n        error: {\n            value: (...args) => error(`${subKey}.${args[0]}`, args[1], args[2]),\n            enumerable: false,\n            configurable: false,\n        },\n        has: {\n            value: key => hasLocalization(`${subKey}.${key}`),\n            enumerable: false,\n            configurable: false,\n        },\n        path: {\n            value: key => localizePath(`${subKey}.${key}`),\n            enumerable: false,\n            configurable: false,\n        },\n        template: {\n            value: (key, { hash }) => fn(key, hash),\n            enumerable: false,\n            configurable: false,\n        },\n    })\n\n    return fn\n}\n\nexport function getSameCombatants(combatant) {\n    return combatant.combat.turns.filter(x => x.actorId === combatant.actorId)\n}\n\nexport function getSetting(key) {\n    return game.settings.get(MODULE_ID, key)\n}\n\nexport function setSetting(key, value) {\n    return game.settings.set(MODULE_ID, key, value)\n}\n\nexport function getActorSceneTokens(scene, actor, linkedOnly = false) {\n    return scene.tokens.filter(token => token.actorId === actor.id && (!linkedOnly || token.actorLink))\n}\n\nexport function getActorTokens(actor, linkedOnly = false) {\n    return game.scenes.map(scene => getActorSceneTokens(scene, actor, linkedOnly)).flat()\n}\n\nexport function capitalize(str) {\n    if (!str) return ''\n    return str[0].toUpperCase() + str.slice(1)\n}\n\nexport function registerSetting(options) {\n    const name = options.name\n    options.scope = options.scope ?? 'world'\n    options.config = options.config ?? false\n    if (options.config) {\n        options.name = getSettingLocalizationPath(name, 'name')\n        options.hint = getSettingLocalizationPath(name, 'hint')\n    }\n    if (Array.isArray(options.choices)) {\n        options.choices = options.choices.reduce((choices, choice) => {\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\n            return choices\n        }, {})\n    }\n    game.settings.register(MODULE_ID, name, options)\n}\n\nexport function registerSettingMenu(options) {\n    const name = options.name\n    options.name = getSettingLocalizationPath('menus', name, 'name')\n    options.label = getSettingLocalizationPath('menus', name, 'label')\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\n    options.restricted = options.restricted ?? true\n    options.icon = options.icon ?? 'fas fa-cogs'\n    game.settings.registerMenu(MODULE_ID, name, options)\n}\n\nexport function getSettingLocalizationPath(...path) {\n    return `${MODULE_ID}.settings.${path.join('.')}`\n}\n\nexport function getCurrentModule() {\n    return game.modules.get(MODULE_ID)\n}\n\nfunction notify(str, arg1, arg2, arg3) {\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\n\n    ui.notifications.notify(localize(str, data), type, { permanent })\n}\n\nexport function warn(...args) {\n    const [str, arg1, arg2] = args\n    notify(str, 'warning', arg1, arg2)\n}\n\nexport function info(...args) {\n    const [str, arg1, arg2] = args\n    notify(str, 'info', arg1, arg2)\n}\n\nexport function error(...args) {\n    const [str, arg1, arg2] = args\n    notify(str, 'error', arg1, arg2)\n}\n\nexport function replaceHTMLText(html, regexp, replacement, addSelf = false) {\n    let nodes = html.find('*')\n    if (addSelf) nodes = nodes.addBack()\n    nodes.contents().each((_, el) => {\n        if (el.nodeType === Node.TEXT_NODE && el.textContent?.trim()) {\n            $(el).replaceWith(el.textContent.replace(regexp, replacement))\n        }\n    })\n}\n", "import { capitalize, getFlag, getSetting, localize, setFlag } from './module'\n\nexport function playersSeeName(doc) {\n    if (doc instanceof Combatant && doc.actor) doc = doc.actor\n    if (doc instanceof Actor && doc.hasPlayerOwner) return true\n    return !!getFlag(doc, 'showName')\n}\n\nexport async function toggleSeeName(doc) {\n    const showName = !playersSeeName(doc)\n\n    if (doc instanceof Actor || !doc.actor) await setFlag(doc, 'showName', showName)\n    else await setFlag(doc.actor, 'showName', showName)\n\n    if (canvas.tokens.hud?.rendered) canvas.tokens.hud.render()\n\n    const actor = doc instanceof Actor ? doc : doc.actor\n\n    return showName\n}\n\nexport function getName(doc) {\n    const unknown = localize('unknown')\n    const type = doc instanceof Actor ? doc.type : doc.actor?.type\n    if (!type) return unknown\n\n    const saved = (getSavedNames()[type] ?? '').trim()\n    return saved || formatUnknown(unknown, type)\n}\n\nexport function refresh() {\n    ui.combat.render()\n}\n\nexport function getSavedNames() {\n    return getSetting('names')\n}\n\nexport function formatUnknown(unknown, type) {\n    return `${unknown} ${capitalize(type)}`\n}\n", "import { playersSeeName, refresh, toggleSeeName } from './api'\nimport { MODULE_ID, localize } from './module'\n\nexport function getActorDirectoryEntryContext(html, entries) {\n    addSelectContextEntry({\n        entries,\n        defaultData: {\n            name: choice => localize(`context.${choice}`),\n            icon: 'fa-solid fa-signature',\n            callback: $li => {\n                const id = $li.attr('data-document-id')\n                const actor = game.actors.get(id)\n                if (actor) toggleSeeName(actor)\n            },\n            condition: ($li, choice) => {\n                const id = $li.attr('data-document-id')\n                const actor = game.actors.get(id)\n                return !!actor && !actor.hasPlayerOwner && (choice === 'show' ? !playersSeeName(actor) : playersSeeName(actor))\n            },\n        },\n        choices: ['show', 'hide'],\n    })\n}\n\nexport function onActorUpdate(actor, data) {\n    let needsRefresh = getProperty(data, `flags.${MODULE_ID}.showName}`) !== undefined\n\n    if ('ownership' in data) {\n        needsRefresh = true\n    }\n\n    if (needsRefresh) refresh()\n}\n\nfunction addSelectContextEntry({ entries, choices, defaultData = {} }) {\n    if (Array.isArray(choices)) {\n        choices = choices.reduce((acc, curr) => {\n            acc[curr] = {}\n            return acc\n        }, {})\n    }\n\n    for (const key in choices) {\n        const choice = choices[key]\n        const name = choice.name ?? (typeof defaultData.name === 'function' ? defaultData.name(key) : defaultData.name) ?? ''\n\n        let icon = choice.icon ?? (typeof defaultData.icon === 'function' ? defaultData.icon(key) : defaultData.icon) ?? ''\n        if (!$(icon).length) {\n            const $icon = $('<i></i>')\n            $icon.addClass(icon)\n            icon = $icon[0].outerHTML\n        }\n\n        entries.unshift({\n            name,\n            icon,\n            callback: $li => {\n                if (choice.callback) choice.callback($li)\n                else if (defaultData.callback) defaultData.callback($li, key)\n            },\n            condition: $li => choice.condition?.($li) ?? defaultData.condition?.($li, key) ?? true,\n        })\n    }\n}\n", "import { formatUnknown, getSavedNames } from '../api'\nimport { localize, setSetting, subLocalize, templatePath } from '../module'\n\nexport class AnonymousNamesMenu extends FormApplication {\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            id: 'anonymous-names-menu',\n            title: localize('templates.names.title'),\n            template: templatePath('names.html'),\n            width: 400,\n        })\n    }\n\n    getData(options) {\n        const unknown = localize('unknown')\n        const saved = getSavedNames()\n        const types = game.system.documentTypes.Actor.map(x => ({\n            type: x,\n            value: (saved[x] ?? '').trim(),\n            placeholder: formatUnknown(unknown, x),\n        }))\n        return {\n            ...super.getData(options),\n            types,\n            i18n: subLocalize('templates.names'),\n        }\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html)\n        html.find('[data-action=cancel]').on('click', () => this.close())\n    }\n\n    async _updateObject(event, formData) {\n        setSetting('names', formData)\n    }\n}\n", "import { getSetting, replaceHTMLText } from '../module'\n\nexport function dnd5ParseChat({ message, $html, isAnonymous, actor }) {\n    if (!isAnonymous) return\n\n    if (message.rolls.length && getSetting('criticals')) {\n        const critical = game.i18n.localize('DND5E.CriticalHit')\n        const powerful = game.i18n.localize('DND5E.PowerfulCritical')\n        const regexp = new RegExp(` (\\\\(([\\\\w ]*)?(?:${critical}|${powerful})([\\\\w ]*)?\\\\))$`, 'igm')\n        const $flavor = $html.find('header .flavor-text')\n        if (game.user.isGM) replaceHTMLText($flavor, regexp, ' <span class=\"anonymous-replaced\">$1</span>', true)\n        replaceHTMLText($flavor, regexp, '', true)\n    }\n}\n", "import { getName, playersSeeName } from '../api'\nimport {\n    getCurrentModule,\n    getSetting,\n    getSettingLocalizationPath,\n    localize,\n    registerSetting,\n    replaceHTMLText,\n    warn,\n} from '../module'\n\nexport function pf2eInitHook(isGM) {\n    registerSetting({\n        name: 'pf2e.traits',\n        type: String,\n        default: 'never',\n        config: true,\n        choices: {\n            never: getSettingLocalizationPath('pf2e.traits.choices.never'),\n            rolls: getSettingLocalizationPath('pf2e.traits.choices.rolls'),\n            always: getSettingLocalizationPath('pf2e.traits.choices.always'),\n        },\n    })\n}\n\nexport function pf2eReadyHook(isGM) {\n    if (isGM) disableSettings()\n}\n\nfunction disableSettings() {\n    let key = ''\n    if (game.settings.settings.has('pf2e.metagame.tokenSetsNameVisibility')) key = 'metagame.tokenSetsNameVisibility'\n    else if (game.settings.settings.has('pf2e.metagame_tokenSetsNameVisibility')) key = 'metagame_tokenSetsNameVisibility'\n    if (!key || !game.settings.get('pf2e', key)) return\n\n    const module = getCurrentModule().title\n    const setting = game.i18n.localize('PF2E.SETTINGS.Metagame.TokenSetsNameVisibility.Name')\n\n    game.settings.set('pf2e', key, false)\n    warn('pf2e.disabled', { module, setting }, true)\n}\n\nexport function pf2eParseChat({ message, isAnonymous, $html }) {\n    const isGM = game.user.isGM\n    const target = message.target?.actor\n    const criticals = getSetting('criticals')\n    const rolls = getSetting('rolls')\n\n    if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\n        const $targets = $html.find('.flavor-text .target-dc [data-whose=\"target\"]')\n        if ($targets.length) {\n            const $target = $targets.first()\n            if (isGM) $target.attr('data-visibility', 'gm')\n            else $target.text(localize('pf2e.target', { name: getName(target) }))\n        }\n    }\n\n    if (!isGM && isAnonymous) {\n        const traits = getSetting('pf2e.traits')\n\n        if (message.rolls.length) {\n            if (rolls) {\n                const $tags = $html.find('.flavor-text hr + .tags')\n\n                if ($tags.length) {\n                    $tags.prev('hr').remove()\n                    $tags.remove()\n                }\n\n                if (criticals) {\n                    $html\n                        .find('.message-content .dice-roll .dice-result .dice-total')\n                        .css('color', 'var(--color-text-dark-primary)')\n                }\n\n                if (traits !== 'never') {\n                    $html.find('.flavor-text .tags').remove()\n                }\n            } else if (traits === 'always') {\n                $html.find('.flavor-text .tags').first().remove()\n            }\n        } else if (traits === 'always') {\n            $html.find('.message-content section.tags').remove()\n        }\n    }\n\n    if (isAnonymous && message.rolls.length && rolls && criticals) {\n        const critical = game.i18n.localize('PF2E.Check.Result.Degree.Attack.criticalSuccess')\n        const hit = game.i18n.localize('PF2E.Check.Result.Degree.Attack.success')\n        const regex = new RegExp(`(\\\\((${critical}|${hit})\\\\))`, 'gmi')\n        const str = isGM ? '<span class=\"anonymous-replaced\">$1</span>' : ''\n        const flavor = $html.find('header .flavor-text')\n        replaceHTMLText(flavor, regex, str, true)\n    }\n}\n", "import { getName, playersSeeName } from '../api'\nimport { getSetting } from '../module'\n\nconst SAVE = /\\(dc \\d+\\)/gim\n\nexport function wireParseChat({ message, isAnonymous, $html }) {\n    if (game.user.isGM) return\n\n    if (isAnonymous) {\n        if (getSetting('rolls')) {\n            const $tooltips = $html.find('.dice-tooltip')\n            $tooltips.empty()\n            $tooltips.css('padding-top', 0)\n\n            if (getSetting('criticals')) {\n                $html.find('.dice-total').removeClass('critical fumble')\n            }\n\n            const $save = $html.find('.phase-saving-throws .phase-heading')\n            $save.text($save.text().replace(SAVE, ''))\n        }\n    }\n\n    // target\n\n    const $target = $html.find('.phase-attack .token-info .token-name')\n    const targetUUID = message.getFlag('wire', 'activation.attack.targetActorUuid')\n    if ($target.length && targetUUID) {\n        try {\n            const target = fromUuidSync(targetUUID)?.actor\n            if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\n                $target.text(getName(target))\n            }\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    const $targets = $html.find('.phase-saving-throws .saving-throw-target:has(.target-name)')\n    const targetsUUID = message.getFlag('wire', 'activation.targetUuids')\n    if ($targets.length && targetsUUID?.length) {\n        try {\n            for (const uuid of targetsUUID) {\n                const target = fromUuidSync(uuid)?.actor\n                if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\n                    $targets.filter(`[data-actor-id=\"${uuid}\"]`).find('.target-name').text(getName(target))\n                }\n            }\n        } catch (error) {\n            console.error(error)\n        }\n    }\n}\n", "import { dnd5ParseChat } from './third/dnd5e'\nimport { pf2eInitHook, pf2eParseChat, pf2eReadyHook } from './third/pf2e'\nimport { wireParseChat } from './third/wire'\n\nexport const thirdPartyInitHooks = createThirdPartyListener()\nexport const thirdPartyReadyHooks = createThirdPartyListener()\nexport const thirdPartyChatParse = createThirdPartyListener()\n\nexport function thirdPartyInitialization() {\n    switch (game.system.id) {\n        case 'pf2e':\n            thirdPartyInitHooks.add(pf2eInitHook)\n            thirdPartyReadyHooks.add(pf2eReadyHook)\n            thirdPartyChatParse.add(pf2eParseChat)\n            break\n        case 'dnd5e':\n            thirdPartyChatParse.add(dnd5ParseChat)\n            break\n    }\n\n    if (game.modules.get('wire')?.active) {\n        thirdPartyChatParse.add(wireParseChat)\n    }\n}\n\nfunction createThirdPartyListener() {\n    const a = []\n    const f = function (...args) {\n        a.forEach(x => x(...args))\n    }\n    f.add = fn => a.push(fn)\n    return f\n}\n", "import { getName, playersSeeName } from './api'\nimport { getSetting, replaceHTMLText } from './module'\nimport { thirdPartyChatParse } from './third'\n\nexport function renderChatMessage(message, html) {\n    if (message.blind) return\n\n    const isGM = game.user.isGM\n    const speaker = message.speaker\n    const actor = ChatMessage.getSpeakerActor(speaker)\n    const playersCanSee = !actor || playersSeeName(actor)\n    const isAnonymous = !!actor && !actor.hasPlayerOwner\n\n    if (actor && !playersCanSee) changeNames(message, actor, html)\n\n    if (!isGM && isAnonymous) {\n        if (message.rolls.length && getSetting('rolls')) {\n            const $result = html.find('.message-content .dice-roll .dice-result')\n            $result.find('.dice-formula, .dice-tooltip').remove()\n            if (getSetting('criticals')) $result.find('.dice-total').removeClass('critical fumble')\n        }\n        if (getSetting('footer')) html.find('.message-content footer.card-footer').remove()\n        if (getSetting('cardContent')) html.find('.message-content .card-content').remove()\n    }\n\n    thirdPartyChatParse({ message, actor, $html: html, playersCanSee, isAnonymous })\n}\n\nfunction changeNames(message, actor, html) {\n    const speaker = message.speaker\n    const names = new Set()\n\n    if (speaker.alias) names.add(speaker.alias)\n    if (actor.name) names.add(actor.name)\n\n    if (speaker.token && speaker.scene) {\n        const scene = game.scenes.get(speaker.scene)\n        const token = scene?.tokens.get(speaker.token)\n        if (token?.name) names.add(token.name)\n    }\n\n    if (!names.size) return\n\n    const escaped = Array.from(names).map(x => RegExp.escape(x))\n    const joined = escaped.join('|')\n    const regexp = new RegExp(`\\\\b(${joined})\\\\b`, 'gmi')\n    const renamed = getName(actor)\n    const replacement = game.user.isGM ? `<span class=\"anonymous-replaced\" title=\"${renamed}\">$1</span>` : renamed\n\n    replaceHTMLText(html, regexp, replacement)\n}\n", "import { playersSeeName, toggleSeeName } from './api'\nimport { getActorTokens, localize } from './module'\n\nexport function renderTokenHUD(hud, html) {\n    const actor = hud.object.actor\n    if (!actor || actor.hasPlayerOwner) return\n\n    const toggle = createToggle(actor)\n    toggle.addEventListener('click', () => toggleSeeName(actor))\n    html.find('.col.right').append(toggle)\n}\n\nfunction createToggle(actor) {\n    const tmp = document.createElement('template')\n    const toggled = playersSeeName(actor)\n\n    tmp.innerHTML = `<div class=\"control-icon${toggled ? ' active' : ''}\" data-action=\"anonymous-toggle\">\n    <i class=\"fa-solid fa-signature\" title=\"${localize('hud.title')}\"></i>\n</div>`\n\n    return tmp.content.firstChild\n}\n", "import { getName, playersSeeName, toggleSeeName } from './api'\nimport { getSameCombatants, localize } from './module'\n\nexport function renderCombatTracker(tracker, html) {\n    const combatants = ui.combat.viewed?.combatants\n    if (!combatants || !combatants.size) return\n\n    html.find('#combat-tracker .combatant').each(function () {\n        const id = this.dataset.combatantId\n        const combatant = combatants.get(id)\n        if (!combatant || !combatant.actor || combatant.actor.hasPlayerOwner) return\n\n        const showName = playersSeeName(combatant)\n\n        if (game.user.isGM) {\n            const controls = this.querySelector('.combatant-controls')\n            const hidden = controls.querySelector('.combatant-control[data-control=\"toggleHidden\"]')\n            const toggle = createToggle(showName)\n\n            toggle.addEventListener('click', event => toggleCombatantName(event, combatant))\n\n            if (hidden) hidden.after(toggle)\n            else controls.appendChild(toggle)\n        } else if (!showName) {\n            const h4 = this.querySelector('h4')\n            h4.textContent = getName(combatant)\n        }\n    })\n}\n\nfunction toggleCombatantName(event, combatant) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    if (event.shiftKey && combatant.actor && combatant.actor.isToken && game.combat?.scene) {\n        getSameCombatants(combatant).forEach(toggleSeeName)\n    } else {\n        toggleSeeName(combatant)\n    }\n}\n\nfunction createToggle(active) {\n    const tmp = document.createElement('template')\n    const tooltip = active ? 'context.hide' : 'context.show'\n\n    tmp.innerHTML = `<a\n    class=\"combatant-control${active ? ' active' : ''}\"\n    data-control=\"toggle-name-visibility\"\n    data-tooltip=\"${localize(tooltip)}\"\n>\n    <i class=\"fa-solid fa-signature\"></i>\n</a>`\n\n    return tmp.content.firstChild\n}\n", "import { getActorDirectoryEntryContext, onActorUpdate } from './actor'\nimport { getName, playersSeeName, refresh, toggleSeeName } from './api'\nimport { AnonymousNamesMenu } from './apps/names'\nimport { renderChatMessage } from './chat'\nimport { getCurrentModule, isGM, registerSetting, registerSettingMenu } from './module'\nimport { thirdPartyInitHooks, thirdPartyInitialization, thirdPartyReadyHooks } from './third'\nimport { renderTokenHUD } from './token'\nimport { renderCombatTracker } from './tracker'\n\nHooks.once('init', () => {\n    registerSetting({\n        name: 'version',\n        type: String,\n        default: '',\n    })\n\n    registerSetting({\n        name: 'names',\n        type: Object,\n        default: {},\n        onChange: refresh,\n    })\n\n    registerSetting({\n        name: 'token',\n        type: Boolean,\n        default: true,\n        config: true,\n    })\n\n    registerSetting({\n        name: 'rolls',\n        type: Boolean,\n        default: true,\n        config: true,\n    })\n\n    registerSetting({\n        name: 'criticals',\n        type: Boolean,\n        default: true,\n        config: true,\n    })\n\n    registerSetting({\n        name: 'cardContent',\n        type: Boolean,\n        default: false,\n        config: true,\n    })\n\n    registerSetting({\n        name: 'footer',\n        type: Boolean,\n        default: false,\n        config: true,\n    })\n\n    registerSettingMenu({\n        name: 'namesMenu',\n        type: AnonymousNamesMenu,\n    })\n\n    getCurrentModule().api = {\n        playersSeeName,\n        toggleSeeName,\n        getName,\n    }\n\n    const gm = isGM()\n\n    if (gm) {\n        Hooks.on('getActorDirectoryEntryContext', getActorDirectoryEntryContext)\n        Hooks.on('renderTokenHUD', renderTokenHUD)\n    }\n\n    thirdPartyInitialization()\n    thirdPartyInitHooks(gm)\n})\n\nHooks.once('ready', () => {\n    thirdPartyReadyHooks(game.user.isGM)\n})\n\nHooks.on('renderCombatTracker', renderCombatTracker)\nHooks.on('renderChatMessage', renderChatMessage)\nHooks.on('updateActor', onActorUpdate)\n"],
  "mappings": "uFAAO,IAAMA,EAAY,YAElB,SAASC,KAAgBC,EAAM,CAClC,OAAAA,EAAOA,EAAK,OAAOC,GAAK,OAAOA,GAAM,QAAQ,EACtC,WAAWH,eAAuBE,EAAK,KAAK,GAAG,GAC1D,CAHgBE,EAAAH,EAAA,gBAKT,SAASI,GAAO,CACnB,IAAMC,EAAO,KAAK,KACZC,EAAOD,EAAK,MAAM,KAAKH,GAAKA,EAAE,MAAQG,EAAK,MAAM,EACvD,MAAO,CAAC,CAACC,GAAQA,EAAK,MAAQ,MAAM,WAAW,UACnD,CAJgBH,EAAAC,EAAA,QAMT,SAASG,EAAQC,EAAKC,EAAKC,EAAU,CACxC,OAAOF,EAAI,QAAQT,EAAWU,CAAG,GAAKC,CAC1C,CAFgBP,EAAAI,EAAA,WAIT,SAASI,EAAQH,EAAKC,EAAKG,EAAO,CACrC,OAAOJ,EAAI,QAAQT,EAAWU,EAAKG,CAAK,CAC5C,CAFgBT,EAAAQ,EAAA,WAIT,SAASE,KAAYC,EAAM,CAC9B,GAAI,CAACL,EAAKJ,CAAI,EAAIS,EAElB,OADAL,EAAM,GAAGV,KAAaU,IAClBJ,EAAa,KAAK,KAAK,OAAOI,EAAKJ,CAAI,EACpC,KAAK,KAAK,SAASI,CAAG,CACjC,CALgBN,EAAAU,EAAA,YAOT,SAASE,EAAYC,EAAQ,CAChC,IAAMC,EAAKd,EAAA,IAAIW,IAASD,EAAS,GAAGG,KAAUF,EAAK,CAAC,IAAKA,EAAK,CAAC,CAAC,EAArD,MAEX,cAAO,iBAAiBG,EAAI,CACxB,KAAM,CACF,MAAO,IAAIH,IAASI,EAAK,GAAGF,KAAUF,EAAK,CAAC,IAAKA,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EACjE,WAAY,GACZ,aAAc,EAClB,EACA,KAAM,CACF,MAAO,IAAIA,IAASK,GAAK,GAAGH,KAAUF,EAAK,CAAC,IAAKA,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EACjE,WAAY,GACZ,aAAc,EAClB,EACA,MAAO,CACH,MAAO,IAAIA,IAASM,GAAM,GAAGJ,KAAUF,EAAK,CAAC,IAAKA,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EAClE,WAAY,GACZ,aAAc,EAClB,EACA,IAAK,CACD,MAAOL,GAAO,gBAAgB,GAAGO,KAAUP,GAAK,EAChD,WAAY,GACZ,aAAc,EAClB,EACA,KAAM,CACF,MAAOA,GAAO,aAAa,GAAGO,KAAUP,GAAK,EAC7C,WAAY,GACZ,aAAc,EAClB,EACA,SAAU,CACN,MAAO,CAACA,EAAK,CAAE,KAAAY,CAAK,IAAMJ,EAAGR,EAAKY,CAAI,EACtC,WAAY,GACZ,aAAc,EAClB,CACJ,CAAC,EAEMJ,CACX,CArCgBd,EAAAY,EAAA,eAuCT,SAASO,EAAkBC,EAAW,CACzC,OAAOA,EAAU,OAAO,MAAM,OAAOrB,GAAKA,EAAE,UAAYqB,EAAU,OAAO,CAC7E,CAFgBpB,EAAAmB,EAAA,qBAIT,SAASE,EAAWf,EAAK,CAC5B,OAAO,KAAK,SAAS,IAAIV,EAAWU,CAAG,CAC3C,CAFgBN,EAAAqB,EAAA,cAIT,SAASC,EAAWhB,EAAKG,EAAO,CACnC,OAAO,KAAK,SAAS,IAAIb,EAAWU,EAAKG,CAAK,CAClD,CAFgBT,EAAAsB,EAAA,cAYT,SAASC,EAAWC,EAAK,CAC5B,OAAKA,EACEA,EAAI,CAAC,EAAE,YAAY,EAAIA,EAAI,MAAM,CAAC,EADxB,EAErB,CAHgBC,EAAAF,EAAA,cAKT,SAASG,EAAgBC,EAAS,CACrC,IAAMC,EAAOD,EAAQ,KACrBA,EAAQ,MAAQA,EAAQ,OAAS,QACjCA,EAAQ,OAASA,EAAQ,QAAU,GAC/BA,EAAQ,SACRA,EAAQ,KAAOE,EAA2BD,EAAM,MAAM,EACtDD,EAAQ,KAAOE,EAA2BD,EAAM,MAAM,GAEtD,MAAM,QAAQD,EAAQ,OAAO,IAC7BA,EAAQ,QAAUA,EAAQ,QAAQ,OAAO,CAACG,EAASC,KAC/CD,EAAQC,CAAM,EAAIF,EAA2BD,EAAM,UAAWG,CAAM,EAC7DD,GACR,CAAC,CAAC,GAET,KAAK,SAAS,SAASE,EAAWJ,EAAMD,CAAO,CACnD,CAfgBF,EAAAC,EAAA,mBAiBT,SAASO,EAAoBN,EAAS,CACzC,IAAMC,EAAOD,EAAQ,KACrBA,EAAQ,KAAOE,EAA2B,QAASD,EAAM,MAAM,EAC/DD,EAAQ,MAAQE,EAA2B,QAASD,EAAM,OAAO,EACjED,EAAQ,KAAOE,EAA2B,QAASD,EAAM,MAAM,EAC/DD,EAAQ,WAAaA,EAAQ,YAAc,GAC3CA,EAAQ,KAAOA,EAAQ,MAAQ,cAC/B,KAAK,SAAS,aAAaK,EAAWJ,EAAMD,CAAO,CACvD,CARgBF,EAAAQ,EAAA,uBAUT,SAASJ,KAA8BK,EAAM,CAChD,MAAO,GAAGF,cAAsBE,EAAK,KAAK,GAAG,GACjD,CAFgBT,EAAAI,EAAA,8BAIT,SAASM,GAAmB,CAC/B,OAAO,KAAK,QAAQ,IAAIH,CAAS,CACrC,CAFgBP,EAAAU,EAAA,oBAIhB,SAASC,EAAOZ,EAAKa,EAAMC,EAAMC,EAAM,CACnC,IAAMC,EAAO,OAAOH,GAAS,SAAWA,EAAO,OACzCI,EAAO,OAAOJ,GAAS,SAAWA,EAAO,OAAOC,GAAS,SAAWA,EAAO,OAC3EI,EAAY,OAAOL,GAAS,UAAYA,EAAO,OAAOC,GAAS,UAAYA,EAAOC,GAAQ,GAEhG,GAAG,cAAc,OAAOI,EAASnB,EAAKiB,CAAI,EAAGD,EAAM,CAAE,UAAAE,CAAU,CAAC,CACpE,CANSjB,EAAAW,EAAA,UAQF,SAASQ,KAAQC,EAAM,CAC1B,GAAM,CAACrB,EAAKa,EAAMC,CAAI,EAAIO,EAC1BT,EAAOZ,EAAK,UAAWa,EAAMC,CAAI,CACrC,CAHgBb,EAAAmB,EAAA,QAKT,SAASE,MAAQD,EAAM,CAC1B,GAAM,CAACrB,EAAKa,EAAMC,CAAI,EAAIO,EAC1BT,EAAOZ,EAAK,OAAQa,EAAMC,CAAI,CAClC,CAHgBb,EAAAqB,GAAA,QAKT,SAASC,MAASF,EAAM,CAC3B,GAAM,CAACrB,EAAKa,EAAMC,CAAI,EAAIO,EAC1BT,EAAOZ,EAAK,QAASa,EAAMC,CAAI,CACnC,CAHgBb,EAAAsB,GAAA,SAKT,SAASC,EAAgBC,EAAMC,EAAQC,EAAaC,EAAU,GAAO,CACxE,IAAIC,EAAQJ,EAAK,KAAK,GAAG,EACrBG,IAASC,EAAQA,EAAM,QAAQ,GACnCA,EAAM,SAAS,EAAE,KAAK,CAACC,EAAGC,IAAO,CACzBA,EAAG,WAAa,KAAK,WAAaA,EAAG,aAAa,KAAK,GACvD,EAAEA,CAAE,EAAE,YAAYA,EAAG,YAAY,QAAQL,EAAQC,CAAW,CAAC,CAErE,CAAC,CACL,CARgB1B,EAAAuB,EAAA,mBCpJT,SAASQ,EAAeC,EAAK,CAEhC,OADIA,aAAe,WAAaA,EAAI,QAAOA,EAAMA,EAAI,OACjDA,aAAe,OAASA,EAAI,eAAuB,GAChD,CAAC,CAACC,EAAQD,EAAK,UAAU,CACpC,CAJgBE,EAAAH,EAAA,kBAMhB,eAAsBI,EAAcH,EAAK,CACrC,IAAMI,EAAW,CAACL,EAAeC,CAAG,EAEhCA,aAAe,OAAS,CAACA,EAAI,MAAO,MAAMK,EAAQL,EAAK,WAAYI,CAAQ,EAC1E,MAAMC,EAAQL,EAAI,MAAO,WAAYI,CAAQ,EAE9C,OAAO,OAAO,KAAK,UAAU,OAAO,OAAO,IAAI,OAAO,EAE1D,IAAME,EAAQN,aAAe,MAAQA,EAAMA,EAAI,MAE/C,OAAOI,CACX,CAXsBF,EAAAC,EAAA,iBAaf,SAASI,EAAQP,EAAK,CACzB,IAAMQ,EAAUC,EAAS,SAAS,EAC5BC,EAAOV,aAAe,MAAQA,EAAI,KAAOA,EAAI,OAAO,KAC1D,OAAKU,GAEUC,EAAc,EAAED,CAAI,GAAK,IAAI,KAAK,GACjCE,EAAcJ,EAASE,CAAI,EAHzBF,CAItB,CAPgBN,EAAAK,EAAA,WAST,SAASM,GAAU,CACtB,GAAG,OAAO,OAAO,CACrB,CAFgBX,EAAAW,EAAA,WAIT,SAASF,GAAgB,CAC5B,OAAOG,EAAW,OAAO,CAC7B,CAFgBZ,EAAAS,EAAA,iBAIT,SAASC,EAAcJ,EAASE,EAAM,CACzC,MAAO,GAAGF,KAAWO,EAAWL,CAAI,GACxC,CAFgBR,EAAAU,EAAA,iBCnCT,SAASI,EAA8BC,EAAMC,EAAS,CACzDC,GAAsB,CAClB,QAAAD,EACA,YAAa,CACT,KAAME,GAAUC,EAAS,WAAWD,GAAQ,EAC5C,KAAM,wBACN,SAAUE,GAAO,CACb,IAAMC,EAAKD,EAAI,KAAK,kBAAkB,EAChCE,EAAQ,KAAK,OAAO,IAAID,CAAE,EAC5BC,GAAOC,EAAcD,CAAK,CAClC,EACA,UAAW,CAACF,EAAKF,IAAW,CACxB,IAAMG,EAAKD,EAAI,KAAK,kBAAkB,EAChCE,EAAQ,KAAK,OAAO,IAAID,CAAE,EAChC,MAAO,CAAC,CAACC,GAAS,CAACA,EAAM,iBAAmBJ,IAAW,OAAS,CAACM,EAAeF,CAAK,EAAIE,EAAeF,CAAK,EACjH,CACJ,EACA,QAAS,CAAC,OAAQ,MAAM,CAC5B,CAAC,CACL,CAnBgBG,EAAAX,EAAA,iCAqBT,SAASY,EAAcJ,EAAOK,EAAM,CACvC,IAAIC,EAAe,YAAYD,EAAM,SAASE,aAAqB,IAAM,OAErE,cAAeF,IACfC,EAAe,IAGfA,GAAcE,EAAQ,CAC9B,CARgBL,EAAAC,EAAA,iBAUhB,SAAST,GAAsB,CAAE,QAAAD,EAAS,QAAAe,EAAS,YAAAC,EAAc,CAAC,CAAE,EAAG,CAC/D,MAAM,QAAQD,CAAO,IACrBA,EAAUA,EAAQ,OAAO,CAACE,EAAKC,KAC3BD,EAAIC,CAAI,EAAI,CAAC,EACND,GACR,CAAC,CAAC,GAGT,QAAWE,KAAOJ,EAAS,CACvB,IAAMb,EAASa,EAAQI,CAAG,EACpBC,EAAOlB,EAAO,OAAS,OAAOc,EAAY,MAAS,WAAaA,EAAY,KAAKG,CAAG,EAAIH,EAAY,OAAS,GAE/GK,EAAOnB,EAAO,OAAS,OAAOc,EAAY,MAAS,WAAaA,EAAY,KAAKG,CAAG,EAAIH,EAAY,OAAS,GACjH,GAAI,CAAC,EAAEK,CAAI,EAAE,OAAQ,CACjB,IAAMC,EAAQ,EAAE,SAAS,EACzBA,EAAM,SAASD,CAAI,EACnBA,EAAOC,EAAM,CAAC,EAAE,UAGpBtB,EAAQ,QAAQ,CACZ,KAAAoB,EACA,KAAAC,EACA,SAAUjB,GAAO,CACTF,EAAO,SAAUA,EAAO,SAASE,CAAG,EAC/BY,EAAY,UAAUA,EAAY,SAASZ,EAAKe,CAAG,CAChE,EACA,UAAWf,GAAOF,EAAO,YAAYE,CAAG,GAAKY,EAAY,YAAYZ,EAAKe,CAAG,GAAK,EACtF,CAAC,EAET,CA7BSV,EAAAR,GAAA,yBC/BF,IAAMsB,EAAN,cAAiC,eAAgB,CACpD,WAAW,gBAAiB,CACxB,OAAO,YAAY,MAAM,eAAgB,CACrC,GAAI,uBACJ,MAAOC,EAAS,uBAAuB,EACvC,SAAUC,EAAa,YAAY,EACnC,MAAO,GACX,CAAC,CACL,CAEA,QAAQC,EAAS,CACb,IAAMC,EAAUH,EAAS,SAAS,EAC5BI,EAAQC,EAAc,EACtBC,EAAQ,KAAK,OAAO,cAAc,MAAM,IAAIC,IAAM,CACpD,KAAMA,EACN,OAAQH,EAAMG,CAAC,GAAK,IAAI,KAAK,EAC7B,YAAaC,EAAcL,EAASI,CAAC,CACzC,EAAE,EACF,MAAO,CACH,GAAG,MAAM,QAAQL,CAAO,EACxB,MAAAI,EACA,KAAMG,EAAY,iBAAiB,CACvC,CACJ,CAEA,kBAAkBC,EAAM,CACpB,MAAM,kBAAkBA,CAAI,EAC5BA,EAAK,KAAK,sBAAsB,EAAE,GAAG,QAAS,IAAM,KAAK,MAAM,CAAC,CACpE,CAEA,MAAM,cAAcC,EAAOC,EAAU,CACjCC,EAAW,QAASD,CAAQ,CAChC,CACJ,EAjCaE,EAAAf,EAAA,sBCDN,SAASgB,EAAc,CAAE,QAAAC,EAAS,MAAAC,EAAO,YAAAC,EAAa,MAAAC,CAAM,EAAG,CAClE,GAAKD,GAEDF,EAAQ,MAAM,QAAUI,EAAW,WAAW,EAAG,CACjD,IAAMC,EAAW,KAAK,KAAK,SAAS,mBAAmB,EACjDC,EAAW,KAAK,KAAK,SAAS,wBAAwB,EACtDC,EAAS,IAAI,OAAO,qBAAqBF,KAAYC,oBAA4B,KAAK,EACtFE,EAAUP,EAAM,KAAK,qBAAqB,EAC5C,KAAK,KAAK,MAAMQ,EAAgBD,EAASD,EAAQ,8CAA+C,EAAI,EACxGE,EAAgBD,EAASD,EAAQ,GAAI,EAAI,EAEjD,CAXgBG,EAAAX,EAAA,iBCST,SAASY,EAAaC,EAAM,CAC/BC,EAAgB,CACZ,KAAM,cACN,KAAM,OACN,QAAS,QACT,OAAQ,GACR,QAAS,CACL,MAAOC,EAA2B,2BAA2B,EAC7D,MAAOA,EAA2B,2BAA2B,EAC7D,OAAQA,EAA2B,4BAA4B,CACnE,CACJ,CAAC,CACL,CAZgBC,EAAAJ,EAAA,gBAcT,SAASK,EAAcJ,EAAM,CAC5BA,GAAMK,GAAgB,CAC9B,CAFgBF,EAAAC,EAAA,iBAIhB,SAASC,IAAkB,CACvB,IAAIC,EAAM,GAGV,GAFI,KAAK,SAAS,SAAS,IAAI,uCAAuC,EAAGA,EAAM,mCACtE,KAAK,SAAS,SAAS,IAAI,uCAAuC,IAAGA,EAAM,oCAChF,CAACA,GAAO,CAAC,KAAK,SAAS,IAAI,OAAQA,CAAG,EAAG,OAE7C,IAAMC,EAASC,EAAiB,EAAE,MAC5BC,EAAU,KAAK,KAAK,SAAS,qDAAqD,EAExF,KAAK,SAAS,IAAI,OAAQH,EAAK,EAAK,EACpCI,EAAK,gBAAiB,CAAE,OAAAH,EAAQ,QAAAE,CAAQ,EAAG,EAAI,CACnD,CAXSN,EAAAE,GAAA,mBAaF,SAASM,EAAc,CAAE,QAAAC,EAAS,YAAAC,EAAa,MAAAC,CAAM,EAAG,CAC3D,IAAMd,EAAO,KAAK,KAAK,KACjBe,EAASH,EAAQ,QAAQ,MACzBI,EAAYC,EAAW,WAAW,EAClCC,EAAQD,EAAW,OAAO,EAEhC,GAAIF,GAAU,CAACA,EAAO,gBAAkB,CAACI,EAAeJ,CAAM,EAAG,CAC7D,IAAMK,EAAWN,EAAM,KAAK,+CAA+C,EAC3E,GAAIM,EAAS,OAAQ,CACjB,IAAMC,EAAUD,EAAS,MAAM,EAC3BpB,EAAMqB,EAAQ,KAAK,kBAAmB,IAAI,EACzCA,EAAQ,KAAKC,EAAS,cAAe,CAAE,KAAMC,EAAQR,CAAM,CAAE,CAAC,CAAC,GAI5E,GAAI,CAACf,GAAQa,EAAa,CACtB,IAAMW,EAASP,EAAW,aAAa,EAEvC,GAAIL,EAAQ,MAAM,OACd,GAAIM,EAAO,CACP,IAAMO,EAAQX,EAAM,KAAK,yBAAyB,EAE9CW,EAAM,SACNA,EAAM,KAAK,IAAI,EAAE,OAAO,EACxBA,EAAM,OAAO,GAGbT,GACAF,EACK,KAAK,sDAAsD,EAC3D,IAAI,QAAS,gCAAgC,EAGlDU,IAAW,SACXV,EAAM,KAAK,oBAAoB,EAAE,OAAO,OAErCU,IAAW,UAClBV,EAAM,KAAK,oBAAoB,EAAE,MAAM,EAAE,OAAO,OAE7CU,IAAW,UAClBV,EAAM,KAAK,+BAA+B,EAAE,OAAO,EAI3D,GAAID,GAAeD,EAAQ,MAAM,QAAUM,GAASF,EAAW,CAC3D,IAAMU,EAAW,KAAK,KAAK,SAAS,iDAAiD,EAC/EC,EAAM,KAAK,KAAK,SAAS,yCAAyC,EAClEC,EAAQ,IAAI,OAAO,QAAQF,KAAYC,SAAY,KAAK,EACxDE,EAAM7B,EAAO,6CAA+C,GAC5D8B,EAAShB,EAAM,KAAK,qBAAqB,EAC/CiB,EAAgBD,EAAQF,EAAOC,EAAK,EAAI,EAEhD,CApDgB1B,EAAAQ,EAAA,iBCvChB,IAAMqB,GAAO,gBAEN,SAASC,EAAc,CAAE,QAAAC,EAAS,YAAAC,EAAa,MAAAC,CAAM,EAAG,CAC3D,GAAI,KAAK,KAAK,KAAM,OAEpB,GAAID,GACIE,EAAW,OAAO,EAAG,CACrB,IAAMC,EAAYF,EAAM,KAAK,eAAe,EAC5CE,EAAU,MAAM,EAChBA,EAAU,IAAI,cAAe,CAAC,EAE1BD,EAAW,WAAW,GACtBD,EAAM,KAAK,aAAa,EAAE,YAAY,iBAAiB,EAG3D,IAAMG,EAAQH,EAAM,KAAK,qCAAqC,EAC9DG,EAAM,KAAKA,EAAM,KAAK,EAAE,QAAQP,GAAM,EAAE,CAAC,EAMjD,IAAMQ,EAAUJ,EAAM,KAAK,uCAAuC,EAC5DK,EAAaP,EAAQ,QAAQ,OAAQ,mCAAmC,EAC9E,GAAIM,EAAQ,QAAUC,EAClB,GAAI,CACA,IAAMC,EAAS,aAAaD,CAAU,GAAG,MACrCC,GAAU,CAACA,EAAO,gBAAkB,CAACC,EAAeD,CAAM,GAC1DF,EAAQ,KAAKI,EAAQF,CAAM,CAAC,CAEpC,OAASG,EAAP,CACE,QAAQ,MAAMA,CAAK,CACvB,CAGJ,IAAMC,EAAWV,EAAM,KAAK,6DAA6D,EACnFW,EAAcb,EAAQ,QAAQ,OAAQ,wBAAwB,EACpE,GAAIY,EAAS,QAAUC,GAAa,OAChC,GAAI,CACA,QAAWC,KAAQD,EAAa,CAC5B,IAAML,EAAS,aAAaM,CAAI,GAAG,MAC/BN,GAAU,CAACA,EAAO,gBAAkB,CAACC,EAAeD,CAAM,GAC1DI,EAAS,OAAO,mBAAmBE,KAAQ,EAAE,KAAK,cAAc,EAAE,KAAKJ,EAAQF,CAAM,CAAC,EAGlG,OAASG,EAAP,CACE,QAAQ,MAAMA,CAAK,CACvB,CAER,CA/CgBI,EAAAhB,EAAA,iBCDT,IAAMiB,EAAsBC,EAAyB,EAC/CC,EAAuBD,EAAyB,EAChDE,EAAsBF,EAAyB,EAErD,SAASG,GAA2B,CACvC,OAAQ,KAAK,OAAO,GAAI,CACpB,IAAK,OACDJ,EAAoB,IAAIK,CAAY,EACpCH,EAAqB,IAAII,CAAa,EACtCH,EAAoB,IAAII,CAAa,EACrC,MACJ,IAAK,QACDJ,EAAoB,IAAIK,CAAa,EACrC,KACR,CAEI,KAAK,QAAQ,IAAI,MAAM,GAAG,QAC1BL,EAAoB,IAAIM,CAAa,CAE7C,CAfgBC,EAAAN,EAAA,4BAiBhB,SAASH,GAA2B,CAChC,IAAMU,EAAI,CAAC,EACLC,EAAIF,EAAA,YAAaG,EAAM,CACzBF,EAAE,QAAQG,GAAKA,EAAE,GAAGD,CAAI,CAAC,CAC7B,EAFU,KAGV,OAAAD,EAAE,IAAMG,GAAMJ,EAAE,KAAKI,CAAE,EAChBH,CACX,CAPSF,EAAAT,EAAA,4BCrBF,SAASe,EAAkBC,EAASC,EAAM,CAC7C,GAAID,EAAQ,MAAO,OAEnB,IAAME,EAAO,KAAK,KAAK,KACjBC,EAAUH,EAAQ,QAClBI,EAAQ,YAAY,gBAAgBD,CAAO,EAC3CE,EAAgB,CAACD,GAASE,EAAeF,CAAK,EAC9CG,EAAc,CAAC,CAACH,GAAS,CAACA,EAAM,eAItC,GAFIA,GAAS,CAACC,GAAeG,GAAYR,EAASI,EAAOH,CAAI,EAEzD,CAACC,GAAQK,EAAa,CACtB,GAAIP,EAAQ,MAAM,QAAUS,EAAW,OAAO,EAAG,CAC7C,IAAMC,EAAUT,EAAK,KAAK,0CAA0C,EACpES,EAAQ,KAAK,8BAA8B,EAAE,OAAO,EAChDD,EAAW,WAAW,GAAGC,EAAQ,KAAK,aAAa,EAAE,YAAY,iBAAiB,EAEtFD,EAAW,QAAQ,GAAGR,EAAK,KAAK,qCAAqC,EAAE,OAAO,EAC9EQ,EAAW,aAAa,GAAGR,EAAK,KAAK,gCAAgC,EAAE,OAAO,EAGtFU,EAAoB,CAAE,QAAAX,EAAS,MAAAI,EAAO,MAAOH,EAAM,cAAAI,EAAe,YAAAE,CAAY,CAAC,CACnF,CAtBgBK,EAAAb,EAAA,qBAwBhB,SAASS,GAAYR,EAASI,EAAOH,EAAM,CACvC,IAAME,EAAUH,EAAQ,QAClBa,EAAQ,IAAI,IAKlB,GAHIV,EAAQ,OAAOU,EAAM,IAAIV,EAAQ,KAAK,EACtCC,EAAM,MAAMS,EAAM,IAAIT,EAAM,IAAI,EAEhCD,EAAQ,OAASA,EAAQ,MAAO,CAEhC,IAAMW,EADQ,KAAK,OAAO,IAAIX,EAAQ,KAAK,GACtB,OAAO,IAAIA,EAAQ,KAAK,EACzCW,GAAO,MAAMD,EAAM,IAAIC,EAAM,IAAI,EAGzC,GAAI,CAACD,EAAM,KAAM,OAGjB,IAAME,EADU,MAAM,KAAKF,CAAK,EAAE,IAAIG,GAAK,OAAO,OAAOA,CAAC,CAAC,EACpC,KAAK,GAAG,EACzBC,EAAS,IAAI,OAAO,OAAOF,QAAc,KAAK,EAC9CG,EAAUC,EAAQf,CAAK,EACvBgB,EAAc,KAAK,KAAK,KAAO,2CAA2CF,eAAuBA,EAEvGG,EAAgBpB,EAAMgB,EAAQG,CAAW,CAC7C,CAtBSR,EAAAJ,GAAA,eCzBF,SAASc,EAAeC,EAAKC,EAAM,CACtC,IAAMC,EAAQF,EAAI,OAAO,MACzB,GAAI,CAACE,GAASA,EAAM,eAAgB,OAEpC,IAAMC,EAASC,GAAaF,CAAK,EACjCC,EAAO,iBAAiB,QAAS,IAAME,EAAcH,CAAK,CAAC,EAC3DD,EAAK,KAAK,YAAY,EAAE,OAAOE,CAAM,CACzC,CAPgBG,EAAAP,EAAA,kBAShB,SAASK,GAAaF,EAAO,CACzB,IAAMK,EAAM,SAAS,cAAc,UAAU,EACvCC,EAAUC,EAAeP,CAAK,EAEpC,OAAAK,EAAI,UAAY,2BAA2BC,EAAU,UAAY;AAAA,8CACvBE,EAAS,WAAW;AAAA,QAGvDH,EAAI,QAAQ,UACvB,CATSD,EAAAF,GAAA,gBCTF,SAASO,EAAoBC,EAASC,EAAM,CAC/C,IAAMC,EAAa,GAAG,OAAO,QAAQ,WACjC,CAACA,GAAc,CAACA,EAAW,MAE/BD,EAAK,KAAK,4BAA4B,EAAE,KAAK,UAAY,CACrD,IAAME,EAAK,KAAK,QAAQ,YAClBC,EAAYF,EAAW,IAAIC,CAAE,EACnC,GAAI,CAACC,GAAa,CAACA,EAAU,OAASA,EAAU,MAAM,eAAgB,OAEtE,IAAMC,EAAWC,EAAeF,CAAS,EAEzC,GAAI,KAAK,KAAK,KAAM,CAChB,IAAMG,EAAW,KAAK,cAAc,qBAAqB,EACnDC,EAASD,EAAS,cAAc,iDAAiD,EACjFE,EAASC,GAAaL,CAAQ,EAEpCI,EAAO,iBAAiB,QAASE,GAASC,GAAoBD,EAAOP,CAAS,CAAC,EAE3EI,EAAQA,EAAO,MAAMC,CAAM,EAC1BF,EAAS,YAAYE,CAAM,UACzB,CAACJ,EAAU,CAClB,IAAMQ,EAAK,KAAK,cAAc,IAAI,EAClCA,EAAG,YAAcC,EAAQV,CAAS,EAE1C,CAAC,CACL,CAzBgBW,EAAAhB,EAAA,uBA2BhB,SAASa,GAAoBD,EAAOP,EAAW,CAC3CO,EAAM,eAAe,EACrBA,EAAM,gBAAgB,EAElBA,EAAM,UAAYP,EAAU,OAASA,EAAU,MAAM,SAAW,KAAK,QAAQ,MAC7EY,EAAkBZ,CAAS,EAAE,QAAQa,CAAa,EAElDA,EAAcb,CAAS,CAE/B,CATSW,EAAAH,GAAA,uBAWT,SAASF,GAAaQ,EAAQ,CAC1B,IAAMC,EAAM,SAAS,cAAc,UAAU,EACvCC,EAAUF,EAAS,eAAiB,eAE1C,OAAAC,EAAI,UAAY;AAAA,8BACUD,EAAS,UAAY;AAAA;AAAA,oBAE/BG,EAASD,CAAO;AAAA;AAAA;AAAA,MAKzBD,EAAI,QAAQ,UACvB,CAbSJ,EAAAL,GAAA,gBChCT,MAAM,KAAK,OAAQ,IAAM,CACrBY,EAAgB,CACZ,KAAM,UACN,KAAM,OACN,QAAS,EACb,CAAC,EAEDA,EAAgB,CACZ,KAAM,QACN,KAAM,OACN,QAAS,CAAC,EACV,SAAUC,CACd,CAAC,EAEDD,EAAgB,CACZ,KAAM,QACN,KAAM,QACN,QAAS,GACT,OAAQ,EACZ,CAAC,EAEDA,EAAgB,CACZ,KAAM,QACN,KAAM,QACN,QAAS,GACT,OAAQ,EACZ,CAAC,EAEDA,EAAgB,CACZ,KAAM,YACN,KAAM,QACN,QAAS,GACT,OAAQ,EACZ,CAAC,EAEDA,EAAgB,CACZ,KAAM,cACN,KAAM,QACN,QAAS,GACT,OAAQ,EACZ,CAAC,EAEDA,EAAgB,CACZ,KAAM,SACN,KAAM,QACN,QAAS,GACT,OAAQ,EACZ,CAAC,EAEDE,EAAoB,CAChB,KAAM,YACN,KAAMC,CACV,CAAC,EAEDC,EAAiB,EAAE,IAAM,CACrB,eAAAC,EACA,cAAAC,EACA,QAAAC,CACJ,EAEA,IAAMC,EAAKC,EAAK,EAEZD,IACA,MAAM,GAAG,gCAAiCE,CAA6B,EACvE,MAAM,GAAG,iBAAkBC,CAAc,GAG7CC,EAAyB,EACzBC,EAAoBL,CAAE,CAC1B,CAAC,EAED,MAAM,KAAK,QAAS,IAAM,CACtBM,EAAqB,KAAK,KAAK,IAAI,CACvC,CAAC,EAED,MAAM,GAAG,sBAAuBC,CAAmB,EACnD,MAAM,GAAG,oBAAqBC,CAAiB,EAC/C,MAAM,GAAG,cAAeC,CAAa",
  "names": ["MODULE_ID", "templatePath", "path", "x", "__name", "isGM", "data", "user", "getFlag", "doc", "key", "fallback", "setFlag", "value", "localize", "args", "subLocalize", "subKey", "fn", "warn", "info", "error", "hash", "getSameCombatants", "combatant", "getSetting", "setSetting", "capitalize", "str", "__name", "registerSetting", "options", "name", "getSettingLocalizationPath", "choices", "choice", "MODULE_ID", "registerSettingMenu", "path", "getCurrentModule", "notify", "arg1", "arg2", "arg3", "type", "data", "permanent", "localize", "warn", "args", "info", "error", "replaceHTMLText", "html", "regexp", "replacement", "addSelf", "nodes", "_", "el", "playersSeeName", "doc", "getFlag", "__name", "toggleSeeName", "showName", "setFlag", "actor", "getName", "unknown", "localize", "type", "getSavedNames", "formatUnknown", "refresh", "getSetting", "capitalize", "getActorDirectoryEntryContext", "html", "entries", "addSelectContextEntry", "choice", "localize", "$li", "id", "actor", "toggleSeeName", "playersSeeName", "__name", "onActorUpdate", "data", "needsRefresh", "MODULE_ID", "refresh", "choices", "defaultData", "acc", "curr", "key", "name", "icon", "$icon", "AnonymousNamesMenu", "localize", "templatePath", "options", "unknown", "saved", "getSavedNames", "types", "x", "formatUnknown", "subLocalize", "html", "event", "formData", "setSetting", "__name", "dnd5ParseChat", "message", "$html", "isAnonymous", "actor", "getSetting", "critical", "powerful", "regexp", "$flavor", "replaceHTMLText", "__name", "pf2eInitHook", "isGM", "registerSetting", "getSettingLocalizationPath", "__name", "pf2eReadyHook", "disableSettings", "key", "module", "getCurrentModule", "setting", "warn", "pf2eParseChat", "message", "isAnonymous", "$html", "target", "criticals", "getSetting", "rolls", "playersSeeName", "$targets", "$target", "localize", "getName", "traits", "$tags", "critical", "hit", "regex", "str", "flavor", "replaceHTMLText", "SAVE", "wireParseChat", "message", "isAnonymous", "$html", "getSetting", "$tooltips", "$save", "$target", "targetUUID", "target", "playersSeeName", "getName", "error", "$targets", "targetsUUID", "uuid", "__name", "thirdPartyInitHooks", "createThirdPartyListener", "thirdPartyReadyHooks", "thirdPartyChatParse", "thirdPartyInitialization", "pf2eInitHook", "pf2eReadyHook", "pf2eParseChat", "dnd5ParseChat", "wireParseChat", "__name", "a", "f", "args", "x", "fn", "renderChatMessage", "message", "html", "isGM", "speaker", "actor", "playersCanSee", "playersSeeName", "isAnonymous", "changeNames", "getSetting", "$result", "thirdPartyChatParse", "__name", "names", "token", "joined", "x", "regexp", "renamed", "getName", "replacement", "replaceHTMLText", "renderTokenHUD", "hud", "html", "actor", "toggle", "createToggle", "toggleSeeName", "__name", "tmp", "toggled", "playersSeeName", "localize", "renderCombatTracker", "tracker", "html", "combatants", "id", "combatant", "showName", "playersSeeName", "controls", "hidden", "toggle", "createToggle", "event", "toggleCombatantName", "h4", "getName", "__name", "getSameCombatants", "toggleSeeName", "active", "tmp", "tooltip", "localize", "registerSetting", "refresh", "registerSettingMenu", "AnonymousNamesMenu", "getCurrentModule", "playersSeeName", "toggleSeeName", "getName", "gm", "isGM", "getActorDirectoryEntryContext", "renderTokenHUD", "thirdPartyInitialization", "thirdPartyInitHooks", "thirdPartyReadyHooks", "renderCombatTracker", "renderChatMessage", "onActorUpdate"]
}
